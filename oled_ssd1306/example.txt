/*	сохраняем данный файл в кодировке UTF-8		*/

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  /*

		ВНИМАНИЕ!!! Если на екране справа артефакты на два пикселя или изображение смещенно на два пикселя влево
		то ето драйвер не SSD1306_128x64, а драйвер SH1106_132x64 он имеет разрешение 
		больше вместо 128 имеет 132 по 2 пикселя больше по краям, но сам экран имеет 128 отсюда и сдвиг
		поэтому указываем драйвер SH1106_132x64 и все будет ОК
		Чаще всего это экраны диагональю 1.3 дюйма

*/

  Давайте приступим к работе сейчас. Запустите ваш STM32cubeMx и создайте новый проект для вашего микроконтроллера 
  с протоколом I2C, работающим на частоте 400 кГц, и рабочим циклом в I2C_DUTYCYCLE_2. 
  
  
  SPI 
		D0		SCL, CLK, SCK		Clock (Линия синхронизации для SPI/I2C)
		D1		SDA, MOSI			Data (Линия данных для SPI/I2C)
		RES		RST, RESET			Rest (Сброс модуля для SPI)
		DC		A0					Data/Command (Разрешение данных для SPI)
		CS							Chip Select (Выбор микросхемы)
		
		ставим режим SPI Transmit Onli Master
		MOSI и SCK подключаем согласно портуб а остальные пины назначаем как выходы ( можно любые порты )
		
  
  Откройте фаил"ssd1306.h" и измените настройки:
  
//#######  SETUP  ############################################################################################################


			//=== SETUP настройки экрана =========================================================
			
			// выбираем тип подключения I2C or SPI
				#define	SSD1306_USE_I2C
			//	#define	SSSD1306_USE_SPI

			// выбираем разрешение экрана ( нужное раскомментировать ) ---------------

			//	#define	SSD1306_64x48
			//	#define	SSD1306_96x16
			//	#define	SSD1306_128x32
				#define	SSD1306_128x64
			//	#define	SH1106_128x64
			//------------------------------------------------------------------
			
			
			// I2C config - указываем номер шины I2C	--------
			#if defined(SSD1306_USE_I2C)
				#ifndef SSD1306_I2C_PORT
					#define SSD1306_I2C_PORT		hi2c1
				#endif

				// указываем I2C address -------------
				#ifndef SSD1306_I2C_ADDR
					#define SSD1306_I2C_ADDR         0x78
					//#define SSD1306_I2C_ADDR       0x7A
				#endif

			//---------------------------------------------------
			
			
			// SPI config - указываем номер SPI и пины ----------
			#elif defined(SSD1306_USE_SPI)
				#ifndef SSD1306_SPI_PORT
					#define SSD1306_SPI_PORT		hspi2
				#endif
				
				#ifndef SSD1306_CS_Port
					#define SSD1306_CS_Port         GPIOB
				#endif
				#ifndef SSD1306_CS_Pin
					#define SSD1306_CS_Pin          GPIO_PIN_12
				#endif

				#ifndef SSD1306_DC_Port
					#define SSD1306_DC_Port         GPIOB
				#endif
				#ifndef SSD1306_DC_Pin
					#define SSD1306_DC_Pin          GPIO_PIN_14
				#endif

				#ifndef SSD1306_Reset_Port
					#define SSD1306_Reset_Port      GPIOA
				#endif
				#ifndef SSD1306_Reset_Pin
					#define SSD1306_Reset_Pin       GPIO_PIN_8
				#endif
			
			//---------------------------------------------------
			#else
			#error "You should define SSD1306_USE_SPI or SSD1306_USE_I2C macro"
			#endif
			
			//====================================================================================
			
			
			Также для экономии памяти в файле fonts.h нужно -> шрифты которые не используються закоментировать
			так как массивы с символами занимают память
			
			//---- для экономии памяти шрифты которые не используються закоментировать --------------------------------------
			// Шрифт имеет кирилицу и латиницу
			#define FONT_6x8		//  6 x 8 pixels font size structure 
			#define FONT_7x9		//  7 x 9 pixels font size structure 
			#define FONT_11x18		//  11 x 18 pixels font size structure 
			#define FONT_16x26		//  16 x 26 pixels font size structure 
			// Только цифры -- only numbers
			#define FONT_16x28		//  16 x 28 pixels font size structure only numbers	
			//--------------------------------------------------------------------------------------------------------------


//#########################################################################################################################

		
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "ssd1306.h"
#include "fonts.h"
#include "bitmap.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



main()=============================================================================================================================

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// дефайны содержащие наш размер экрана
	// SSD1306_WIDTH
	// SSD1306_HEIGHT

	SSD1306_Init (); // инициализация дисплея
	
	// контрасность от 0 до 255 ================
	SSD1306_Contrast( 255 );
	
	// отзеркаливание изображение 1- включить, 0 -выключить ( по умолчанию выключено )
	SSD1306_MirrorReflection( 0 );
	
	// поворот экрана ( ротация ) 1-поварачиваем на 180, 0- поварачиваем на 0 ( по умолчанию 0 )
	SSD1306_ScreenRotation( 0 );
	
	// смотрим по центру ли картинка
	SSD1306_DrawPixel(0, 0,SSD1306_COLOR_WHITE);
	SSD1306_DrawPixel(127, 0,SSD1306_COLOR_WHITE);
	SSD1306_DrawPixel(127, 63,SSD1306_COLOR_WHITE);
	SSD1306_DrawPixel(0, 63,SSD1306_COLOR_WHITE);
	SSD1306_DrawRectangle(1, 1, 125, 61, SSD1306_COLOR_WHITE);
	SSD1306_UpdateScreen(); // выводим на екран все что выше указали
	SSD1306_InvertDisplay ( 1 );
	HAL_Delay(4000);
	
	// счет начинаеться с 0 и заканчивается разрешение -1
	SSD1306_GotoXY (10,10); // переводим курсор на 10 пикселей по горизонтали и 10 по вертикали
	
	// Только цифры -- only numbers Font_16x28
	// шрифты размеров латиница  Font6x8   Font_7x9   Font_11x18   Font_16x26
	
	SSD1306_Puts ("HELLO", &Font_6x8, SSD1306_COLOR_WHITE); // печатаем надпись с указаным шрифтом и цветом ( 1- белый , 0 -черный )
	SSD1306_UpdateScreen(); // выводим на екран все что выше указали
	
	// РУССКИЙ шрифт 
	// Если пишем по РУССКИ то только через функцию utf8rus()
	SSD1306_Puts ( utf8rus("Привет HELLO"), &Font_7x9, SSD1306_COLOR_WHITE); // печатаем надпись с указаным шрифтом и цветом ( 1- белый , 0 -черный )
	// незабываем каждый раз после вызова функции utf8rus() освобождать память
	free( pText );	// освобождаем память выделенную в функции utf8rus() посредством malloc();
	SSD1306_UpdateScreen(); // выводим на екран все что выше указали
	
	// счет начинаеться с 0 и заканчивается разрешение -1
	SSD1306_GotoXY (10, 30); 
	SSD1306_Puts ("WORLD !!", &Font_11x18, SSD1306_COLOR_WHITE); 

	SSD1306_UpdateScreen(); // выводим на екран все что выше указали

	HAL_Delay(2000);

	// Цвет дисплея можно инвертировать с помощью i = 1, инвертирует дисплей, i = 0 нормализует его
	SSD1306_InvertDisplay ( 1 );

	HAL_Delay(2000);

	// Цвет дисплея можно инвертировать с помощью i = 1, инвертирует дисплей, i = 0 нормализует его
	SSD1306_InvertDisplay ( 0 );

	HAL_Delay(2000);

	SSD1306_Clear();		// очистка экрана

	// счет начинаеться с 0 и заканчивается разрешение -1
	// SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c); // рисуем линию ( для отображения вызываем SSD1306_UpdateScreen(); )
	
	// скроллинг текста 
	// SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row);		// скроллинг вправо
	// SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row);
	// SSD1306_Scrolldiagright(uint8_t start_row, uint8_t end_row);
	// SSD1306_Scrolldiagleft(uint8_t start_row, uint8_t end_row);
	// SSD1306_Stopscroll(void);									// остановить скроллинг

		/*
			// рисуем картинку ( находиться в массиве logo )
			// SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color);

			SSD1306_DrawBitmap( 0, 0, logo, SSD1306_WIDTH, SSD1306_HEIGHT, 1 );
			SSD1306_UpdateScreen(); // update screen
		*/

		// SSD1306_ToggleInvert(void);	// инверсия экрана на противоположный
		
		// SSD1306_Fill(SSD1306_COLOR_t color);
		
		// счет начинаеться с 0 и заканчивается разрешение -1
		// SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color);
		// SSD1306_UpdateScreen(); // update screen
		
		// SSD1306_GotoXY(uint16_t x, uint16_t y)
		// SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color);
		// SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color);
		// SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c);
		// SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c);
		// SSD1306_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color)
		// SSD1306_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color);
		// SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c);
		// SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c);
		// SSD1306_ON(void);
		// SSD1306_OFF(void);
		// SSD1306_Clear();
		
		
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


while(1)===========================================================================================================================

	.........
	.........
	.........
	.........

=== end while(1) ==================================================================================================================
=== end main() ====================================================================================================================
